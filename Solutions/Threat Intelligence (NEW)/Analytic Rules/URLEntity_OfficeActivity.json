{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "Parameters": {
    "Workspace": {
      "type": "string"
    }
  },
  "resources": [
    {
      "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e7abee0a-4a8d-459c-97e4-58c30bee80b1')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e7abee0a-4a8d-459c-97e4-58c30bee80b1')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "kind": "Scheduled",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "triggerOperator": "gt",
        "tactics": [
          "CommandAndControl"
        ],
        "name": "TI Map URL Entity to OfficeActivity Data [Deprecated]",
        "query": "let dt_lookBack = 1h;\n//   let ioc_lookBack = 14d;\n//   ThreatIntelIndicators\n//    //extract key part of kv pair\n//   | extend IndicatorType = replace(@\"\\[|\\]|\\\"\"\", \"\", tostring(split(ObservableKey, \":\", 0)))\n//   | where IndicatorType == \"url\"\n//   | extend Url = ObservableValue\n//   | where isnotempty(Url)\n//   | extend TrafficLightProtocolLevel = tostring(parse_json(AdditionalFields).TLPLevel)\n//   // Picking up only IOC's that contain the entities we want\n//   | where isnotempty(Url)\n//   | where TimeGenerated >= ago(ioc_lookBack)\n//   | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by Id\n//   | where IsActive == true and ValidUntil > now()\n//    | project-reorder *, Tags, TrafficLightProtocolLevel, Url, Type\n//    // using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n//    | join kind=innerunique (\n//    OfficeActivity\n//    | where TimeGenerated >= ago(dt_lookBack)\n//    //Extract the Url from a number of potential fields\n//    | extend Url = iif(OfficeWorkload == \"AzureActiveDirectory\",extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,ModifiedProperties),tostring(parse_json(ModifiedProperties)[12].NewValue))\n//    | where isnotempty(Url)\n//    // Ensure we get a clean URL\n//    | extend Url = tostring(split(Url, ';')[0])\n//    | extend OfficeActivity_TimeGenerated = TimeGenerated\n//    // Project a single user identity that we can use for entity mapping\n//    | extend User = iif(isnotempty(UserId), UserId, iif(isnotempty(Actor), tostring(parse_json(Actor)[0].ID), tostring(parse_json(Parameters)[0].Value)))\n//    ) on Url\n//    | where OfficeActivity_TimeGenerated < ValidUntil\n//    | summarize OfficeActivity_TimeGenerated = arg_max(OfficeActivity_TimeGenerated, *) by Id, Url\n//    | extend Description = tostring(parse_json(Data).description)\n//    | extend ActivityGroupNames = extract(@\"ActivityGroup:(\\S+)\", 1, tostring(parse_json(Data).labels))\n//    | project OfficeActivity_TimeGenerated, Description, ActivityGroupNames, Id, Type, ValidUntil, Confidence, Operation,\n//    UserType, OfficeWorkload, Parameters, Url, User\n//    | extend timestamp = OfficeActivity_TimeGenerated, Name = tostring(split(User, '@', 0)[0]), UPNSuffix = tostring(split(User, '@', 1)[0])\n//datatable() []\n",
        "entityMappings": [
          {
            "entityType": "Account",
            "fieldMappings": [
              {
                "columnName": "User",
                "identifier": "FullName"
              },
              {
                "columnName": "Name",
                "identifier": "Name"
              },
              {
                "columnName": "UPNSuffix",
                "identifier": "UPNSuffix"
              }
            ]
          },
          {
            "entityType": "URL",
            "fieldMappings": [
              {
                "columnName": "Url",
                "identifier": "Url"
              }
            ]
          }
        ],
        "queryPeriod": "14d",
        "description": "'This query is Deprecated as its filter conditions will never yield results. This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in OfficeActivity data.'\n",
        "triggerThreshold": 0,
        "severity": "Medium",
        "queryFrequency": "1h"
      }
    }
  ]
}
