{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "Parameters": {
    "Workspace": {
      "type": "string"
    }
  },
  "resources": [
    {
      "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4a6f6b20-f22c-455c-bce1-67258306544a')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4a6f6b20-f22c-455c-bce1-67258306544a')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "kind": "Scheduled",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "triggerThreshold": 0,
        "queryPeriod": "5m",
        "triggerOperator": "gt",
        "severity": "Medium",
        "tactics": [
          "Impact"
        ],
        "queryFrequency": "5m",
        "description": "'Command injection is a malicious technique where attackers exploit vulnerabilities in web applications to inject and execute arbitrary operating system (OS) commands on the server. By manipulating input data, attackers can manipulate the application's execution flow, tricking it into running unintended system commands.This can result in data breaches, system compromise, etc. Contrast uses various detection capabilities for Command Injection. Some track malicious input into commands being run, some detect sensitive file paths being accessed, and so forth.'\n",
        "name": "SQL Injection",
        "query": "ContrastADR_CL | where rule_s == \"cmd-injection\"",
        "status": "Available",
        "entityMappings": [
          {
            "entityType": "URL",
            "fieldMappings": [
              {
                "identifier": "Url",
                "columnName": "uiUrl_s"
              }
            ]
          }
        ]
      }
    }
  ]
}
