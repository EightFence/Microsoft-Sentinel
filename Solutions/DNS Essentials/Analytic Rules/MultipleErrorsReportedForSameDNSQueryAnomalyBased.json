{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "Parameters": {
    "Workspace": {
      "type": "string"
    }
  },
  "resources": [
    {
      "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/cf687598-5a2c-46f8-81c8-06b15ed489b1')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/cf687598-5a2c-46f8-81c8-06b15ed489b1')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "kind": "Scheduled",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "queryPeriod": "14d",
        "description": "'This rule makes use of the series decompose anomaly method to generate an alert when multiple clients report errors for the same DNS query. This rule monitors DNS traffic over a period of 14 days to detect possible similar C2 communication originating from different clients. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.'\n",
        "triggerThreshold": 0,
        "status": "Available",
        "name": "Detect DNS queries reporting multiple errors from different clients - Anomaly Based (ASIM DNS Solution)",
        "triggerOperator": "gt",
        "customDetails": {
          "baseline": "baseline",
          "TotalIPs": "TotalIPs",
          "SrcIps": "SrcIps",
          "AnomalyScore": "score"
        },
        "query": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet Errors = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']);\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n          DNS_Summarized_Logs_ip_CL \n              | where EventTime_t >= min_t\n              | summarize max_TimeGenerated=max(EventTime_t)\n              | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\n      ),\n      (\n          print(min_t)\n          | project max_TimeGenerated = print_0\n      )\n    | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\n  let summarizationexist = materialize(\n            union isfuzzy=true \n              (\n                  DNS_Summarized_Logs_ip_CL\n                  | where EventTime_t > ago(1d) \n                  | project v = int(2)\n              ),\n              (\n                  print int(1) \n                  | project v = print_0\n              )\n              | summarize maxv = max(v)\n              | extend sumexist = (maxv > 1)\n            );\nlet allData = union isfuzzy=true\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) > 1000 | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(2d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(3d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) <= 500 | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(4d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and EventResultDetails_s in (Errors)\n      | project-rename SrcIpAddr=SrcIpAddr_s, DnsQuery=DnsQuery_s, Count=count__d, EventTime=EventTime_t\n      | extend Count = toint(Count) \n);\nallData\n| make-series TotalIPCount=dcount(SrcIpAddr) on EventTime from min_t to max_t step dt by DnsQuery\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalIPCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, TotalIPCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  TotalIPs = tolong(TotalIPCount)\n| where EventTime >= ago(dt)\n| where score >= threshold * 2\n| join kind=inner(allData | where TimeGenerated>ago(dt) | summarize SrcIps = make_set(SrcIpAddr,1000) by DnsQuery) on DnsQuery\n| project-away DnsQuery1\n",
        "eventGroupingSettings": {
          "aggregationKind": "AlertPerResult"
        },
        "tactics": [
          "CommandAndControl"
        ],
        "severity": "Medium",
        "queryFrequency": "1d",
        "entityMappings": [
          {
            "entityType": "DNS",
            "fieldMappings": [
              {
                "columnName": "DnsQuery",
                "identifier": "DomainName"
              }
            ]
          }
        ],
        "alertDetailsOverride": {
          "alertDescriptionFormat": "Multiple errors were detected on different clients for the same DNS query. These unsuccessful responses can be an indication of C2 communication. \n\nBaseline for total clients reporting errors for this DNS query: '{{baseline}}'\n\nCurrent count of clients reporting errors for this DNS query: '{{TotalIPs}}'\n\nClients requesting this DNS query include:\n'{{SrcIps}}'",
          "alertDisplayNameFormat": "[Anomaly] Multiple errors for the same DNS query has been detected - '{{DnsQuery}}'"
        }
      }
    }
  ]
}
