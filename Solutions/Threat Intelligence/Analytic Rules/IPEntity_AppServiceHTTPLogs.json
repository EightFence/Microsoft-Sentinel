{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "Parameters": {
    "Workspace": {
      "type": "string"
    }
  },
  "resources": [
    {
      "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f9949656-473f-4503-bf43-a9d9890f7d08')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f9949656-473f-4503-bf43-a9d9890f7d08')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "kind": "Scheduled",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "triggerThreshold": 0,
        "triggerOperator": "gt",
        "query": "let dt_lookBack = 1h; // Look back 1 hour for AppServiceHTTPLogs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  // Filter out indicators without relevant IP address fields\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  // Filtering out rows where the Confidence Score is less than 50 as they would not have an Alert Priority label. \n  | where ConfidenceScore > 50\n  // Select the IP entity based on availability of different IP fields\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  // Determine AlertPriority based on ConfidenceScore\n  | extend AlertPriority = case(ConfidenceScore > 82, \"High\",\n                                ConfidenceScore > 74, \"Medium\",\n                                \"Low\")\n  // Exclude local addresses using the ipv4_is_private operator and filtering out specific address prefixes\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AppServiceHTTPLogs to identify potential malicious activity\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n    AppServiceHTTPLogs | where TimeGenerated >= ago(dt_lookBack)\n    | where isnotempty(CIp)\n    | extend WebApp = split(_ResourceId, '/')[8]\n    | extend AppService_TimeGenerated = TimeGenerated // Rename time column for clarity\n  )\n  on $left.TI_ipEntity == $right.CIp\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where AppService_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and CIp, and keep the log entry with the latest timestamp\n  | summarize AppService_TimeGenerated = arg_max(AppService_TimeGenerated, *) by IndicatorId, CIp\n  // Select the desired output fields\n  | project AppService_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TI_ipEntity, CsUsername, WebApp = split(_ResourceId, '/')[8], CIp, CsHost, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, _ResourceId, Type\n  // Extract hostname and DNS domain from the CsHost field\n  | extend HostName = tostring(split(CsHost, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(CsHost, '.'), 1, -1), '.'))\n  // Rename the timestamp field\n  | extend timestamp = AppService_TimeGenerated\n",
        "tactics": [
          "Impact"
        ],
        "queryFrequency": "1h",
        "alertDetailsOverride": {
          "alertSeverityColumnName": "AlertPriority"
        },
        "description": "Identifies a match in AppServiceHTTPLogs from any IP IOC from TI\n",
        "queryPeriod": "14d",
        "severity": "Medium",
        "entityMappings": [
          {
            "entityType": "Host",
            "fieldMappings": [
              {
                "identifier": "HostName",
                "columnName": "HostName"
              },
              {
                "identifier": "DnsDomain",
                "columnName": "DnsDomain"
              }
            ]
          },
          {
            "entityType": "Account",
            "fieldMappings": [
              {
                "identifier": "Name",
                "columnName": "CsUsername"
              }
            ]
          },
          {
            "entityType": "IP",
            "fieldMappings": [
              {
                "identifier": "Address",
                "columnName": "CIp"
              }
            ]
          },
          {
            "entityType": "URL",
            "fieldMappings": [
              {
                "identifier": "Url",
                "columnName": "Url"
              }
            ]
          },
          {
            "entityType": "AzureResource",
            "fieldMappings": [
              {
                "identifier": "ResourceId",
                "columnName": "_ResourceId"
              }
            ]
          }
        ],
        "name": "TI map IP entity to AppServiceHTTPLogs"
      }
    }
  ]
}
