{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "Parameters": {
    "Workspace": {
      "type": "string"
    }
  },
  "resources": [
    {
      "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/cd6def0d-3ef0-4d55-a7e3-faa96c46ba12')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/cd6def0d-3ef0-4d55-a7e3-faa96c46ba12')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "kind": "Scheduled",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "status": "Available",
        "description": "'The rule identifies anomalous pattern in network session traffic based on previously seen data, different Device Action, Network Protocol, Network Direction or overall volume. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema. This rule leverages log summaries generated by a Summary Rule or Summarized Playbook. If no such summaries are available, the rule falls back to direct analysis using ASIM function.'\n",
        "severity": "Medium",
        "name": "Anomaly found in Network Session Traffic (ASIM Network Session schema)",
        "eventGroupingSettings": {
          "aggregationKind": "AlertPerResult"
        },
        "queryPeriod": "14d",
        "triggerOperator": "gt",
        "queryFrequency": "1d",
        "triggerThreshold": 0,
        "tactics": [
          "CommandAndControl",
          "Discovery",
          "Exfiltration",
          "LateralMovement"
        ],
        "query": "let min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet fieldForDvcAction = \"DvcAction\";\nlet fieldForNetworkDirection = \"NetworkDirection\";\nlet fieldForNetworkProtocol = \"NetworkProtocol\";\nlet AnomalyThreshold = 2.5;\nlet eps = materialize (_Im_NetworkSession\n    | project TimeGenerated\n    | where TimeGenerated > ago(5m)\n    | count\n    | extend Count = Count / 300);\nlet maxSummarizedTime = toscalar (\n    union isfuzzy=true\n        (\n        NetworkSummary_Protocol_CL\n        | where EventTime > min_t\n        | summarize max_TimeGenerated=max(EventTime)\n        | extend max_TimeGenerated = datetime_add('minute', 20, max_TimeGenerated)\n        ),\n        (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t > min_t\n        | summarize max_TimeGenerated=max(EventTime_t)\n        | extend max_TimeGenerated = datetime_add('minute', 20, max_TimeGenerated)\n        ),\n        (\n        print(min_t)\n        | project max_TimeGenerated = print_0\n        )\n    | summarize maxTimeGenerated = max(max_TimeGenerated) \n    );\nlet NetworkSummary_Protocol = materialize(\n    union isfuzzy=true \n        (\n        NetworkSummary_Protocol_CL\n        | where EventTime > ago(1d)\n        | project v = int(2)\n        ),\n        (\n        print int(1) \n        | project v = print_0\n        )\n    | summarize maxv = max(v)\n    | extend\n        NetworkSummary_Protocol_Exists = (maxv > 1),\n        NetworkCustomAnalyticsExists = false\n    );\nlet NetworkCustomAnalytics = materialize(\n    union isfuzzy=true \n        (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t > ago(1d) \n        | project v = int(2)\n        ),\n        (\n        print int(1) \n        | project v = print_0\n        )\n    | summarize maxv = max(v)\n    | extend\n        NetworkCustomAnalyticsExists = (maxv > 1),\n        NetworkSummary_Protocol_Exists = false\n    );\nlet allData = union isfuzzy=true \n        (\n        (datatable(\n    exists: int,\n    NetworkSummary_Protocol_Exists: bool,\n    NetworkCustomAnalyticsExists: bool\n)[\n    1, false, false\n]\n        | where toscalar(eps) > 1000\n        | join (NetworkSummary_Protocol) on NetworkSummary_Protocol_Exists\n        | join (NetworkCustomAnalytics) on NetworkCustomAnalyticsExists)\n        | join (\n            _Im_NetworkSession(starttime=todatetime(ago(2d)), endtime=now())\n            | where TimeGenerated > maxSummarizedTime\n            | summarize Count=count()\n                by\n                NetworkProtocol,\n                DstPortNumber,\n                DstAppName,\n                NetworkDirection,\n                DvcAction,\n                bin(TimeGenerated, 10m)\n            | extend\n                EventTime = TimeGenerated,\n                Count = toint(Count),\n                DstPortNumber = toint(DstPortNumber),\n                exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, NetworkSummary_Protocol_Exists*, NetworkCustomAnalyticsExists*\n        ),\n        (\n        (datatable(\n    exists: int,\n    NetworkSummary_Protocol_Exists: bool,\n    NetworkCustomAnalyticsExists: bool\n)[\n    1, false, false\n]\n        | where toscalar(eps) between (501 .. 1000)\n        | join (NetworkSummary_Protocol) on NetworkSummary_Protocol_Exists\n        | join (NetworkCustomAnalytics) on NetworkCustomAnalyticsExists)\n        | join (\n            _Im_NetworkSession(starttime=todatetime(ago(3d)), endtime=now())\n            | where TimeGenerated > maxSummarizedTime\n            | summarize Count=count()\n                by\n                NetworkProtocol,\n                DstPortNumber,\n                DstAppName,\n                NetworkDirection,\n                DvcAction,\n                bin(TimeGenerated, 10m)\n            | extend\n                EventTime = TimeGenerated,\n                Count = toint(Count),\n                DstPortNumber = toint(DstPortNumber),\n                exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, NetworkSummary_Protocol_Exists*, NetworkCustomAnalyticsExists*\n        ),\n        (\n        (datatable(\n    exists: int,\n    NetworkSummary_Protocol_Exists: bool,\n    NetworkCustomAnalyticsExists: bool\n)[\n    1, false, false\n]\n        | where toscalar(eps) <= 500\n        | join (NetworkSummary_Protocol) on NetworkSummary_Protocol_Exists\n        | join (NetworkCustomAnalytics) on NetworkCustomAnalyticsExists\n        )\n        | join (\n            _Im_NetworkSession(starttime=todatetime(ago(4d)), endtime=now())\n            | where TimeGenerated > maxSummarizedTime\n            | summarize Count=count()\n                by\n                NetworkProtocol,\n                DstPortNumber,\n                DstAppName,\n                NetworkDirection,\n                DvcAction,\n                bin(TimeGenerated, 10m)\n            | extend\n                EventTime = TimeGenerated,\n                Count = toint(Count),\n                DstPortNumber = toint(DstPortNumber),\n                exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, NetworkSummary_Protocol_Exists*, NetworkCustomAnalyticsExists*\n        ),\n        (\n        (datatable(exists: int, NetworkSummary_Protocol_Exists: bool)[1, false]\n        | join (NetworkSummary_Protocol) on NetworkSummary_Protocol_Exists\n        )\n        | join (\n            NetworkCustomAnalytics_protocol_CL\n            | where EventTime_t > min_t\n            | project\n                NetworkProtocol=NetworkProtocol_s,\n                DstPortNumber=DstPortNumber_d,\n                DstAppName=DstAppName_s,\n                NetworkDirection=NetworkDirection_s,\n                DvcAction=DvcAction_s,\n                Count=count__d,\n                EventTime=EventTime_t,\n                TimeGenerated,\n                Type\n            | extend Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, NetworkSummary_Protocol_Exists*, NetworkCustomAnalyticsExists*\n        ),\n        (\n        NetworkSummary_Protocol_CL\n        | where EventTime > min_t\n        | project\n            NetworkProtocol,\n            DstPortNumber,\n            DstAppName,\n            NetworkDirection,\n            DvcAction,\n            Count=count_,\n            EventTime,\n            TimeGenerated,\n            Type\n        | extend Count = toint(Count), DstPortNumber = toint(DstPortNumber)\n        )\n;\nlet findVolumneBasedAnomaly = allData\n    | make-series total=sum(Count) on EventTime from min_t to max_t step dt\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(total, AnomalyThreshold, -1, 'linefit') \n    | mv-expand anomalies, score, baseline, EventTime, total\n    | extend\n        anomalies = toint(anomalies),\n        score = toint(score),\n        baseline = toint(baseline),\n        EventTime = todatetime(EventTime),\n        total = tolong(total)\n    | where EventTime >= ago(1d)\n    | where score >= 2 * AnomalyThreshold\n;\nlet findAnomalies = (field: string) {\n    allData\n    | where isnotempty(column_ifexists(field, \"\"))\n    | make-series total=sum(Count) on EventTime from min_t to max_t step dt by column_ifexists(field, \"\")\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(total, AnomalyThreshold, -1, 'linefit')\n    | mv-expand anomalies, score, baseline, EventTime, total\n    | extend\n        anomalies = toint(anomalies),\n        score = toint(score),\n        baseline = toint(baseline),\n        EventTime = todatetime(EventTime),\n        total = tolong(total)\n    | where EventTime >= ago(1d)\n    | where score >= 2 * AnomalyThreshold\n};\nunion\n    findAnomalies(fieldForDvcAction),\n    findAnomalies(fieldForNetworkDirection),\n    findAnomalies(fieldForNetworkProtocol),\n    findVolumneBasedAnomaly\n| extend\n    anomalyFieldType  = case (\n                        isnotempty(column_ifexists(fieldForDvcAction, \"\")),\n                        \"DvcAction\",\n                        isnotempty(column_ifexists(fieldForNetworkDirection, \"\")),\n                        \"NetworkDirection\",\n                        isnotempty(column_ifexists(fieldForNetworkProtocol, \"\")),\n                        \"NetworkProtocol\",\n                        \"TotalVolume\"\n                    ),\n    anomalyFieldValue  = case (\n                        isnotempty(column_ifexists(fieldForDvcAction, \"\")),\n                        column_ifexists(fieldForDvcAction, \"\"),\n                        isnotempty(column_ifexists(fieldForNetworkDirection, \"\")),\n                        column_ifexists(fieldForNetworkDirection, \"\"),\n                        isnotempty(column_ifexists(fieldForNetworkProtocol, \"\")),\n                        column_ifexists(fieldForNetworkProtocol, \"\"),\n                        \"Overall\"\n                    )\n",
        "alertDetailsOverride": {
          "alertDescriptionFormat": "Based on past data, anomaly was observed in {{anomalyFieldValue}} Traffic with a score of {{score}}.",
          "alertDisplayNameFormat": "Anomaly was observed with {{anomalyFieldValue}} Traffic"
        },
        "customDetails": {
          "AnomalyFieldValue": "anomalyFieldValue",
          "Score": "score",
          "AnomalyFieldType": "anomalyFieldType"
        }
      }
    }
  ]
}
