name: Microsoft Sentinel Detections

on:
  push:
    branches:
      - main
      - feature/AddingDetectionWorkFlow

jobs:
  Release:
    runs-on: ubuntu-latest

    steps:
    - name: checkout branch
      uses: actions/checkout@v3
      with:
        repository: ${{github.repository}}
        path: Microsoft-Sentinel

    - name: checkout Azure Sentinel
      uses: actions/checkout@v3
      with:
        repository: Azure/Azure-Sentinel
        path: Azure-Sentinel

    - name: check repo content
      run: |
        ls -al

    - name: Convert rules
      shell: pwsh
      run: |
        Write-Host "Function start"

        ./Microsoft-Sentinel/.script/ConvertFrom-YamlSentinelRule.ps1 -SourcePath "./Azure-Sentinel/Detections/" -OutputFolder "./Microsoft-Sentinel/Detections/" -Verbose

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit files
      shell: pwsh
      run: |
        # Switch to wiki folder
        cd "./Microsoft-Sentinel"

        # Test to see if there are any git changes that need to be commit
        if ($null -eq $(git update-index --refresh && git diff-index --quiet HEAD -- )) {
            Write-Host "No changes to commit" -ForegroundColor Yellow
        }
        else {
            Write-Host Found changes that need to be updated -ForegroundColor Green

            # Start commit and push changes
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "Update changes"
            git push
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Release to GitHub
    #   shell: pwsh
    #   run: |
    #     # Package library
    #     cd "./Microsoft-Sentinel"

    #     git fetch --tags -f
    #     $version = git tag | sort -V | tail -1

    #     Write-Host "version is $version"
    #     if ($null -eq $version) {
    #       write-host "niet gelukt"
    #       break
    #     }

    #     $solutions = Get-ChildItem -Path . -Directory
    #     $solutions | select name
    #     Write-Host $solutions.count

    #     if (Test-Path ./BuildOutput -ErrorAction SilentlyContinue) {
    #       Remove-Item ./BuildOutput -Force
    #       New-Item ./BuildOutput -ItemType Directory
    #     }
    #     else {
    #       New-Item ./BuildOutput -ItemType Directory
    #     }

    #     foreach ($solution in $solutions) {
    #       Write-Host $solution.Name
    #       Write-Host $solution.FullName

    #       Compress-Archive -DestinationPath "./BuildOutput/detections_$($solution.Name)_$($version).zip" -Path $solution.FullName
    #     }

    #     gh release upload $version ./BuildOutput/*.zip --clobber
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
