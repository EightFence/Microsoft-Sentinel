{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "Parameters": {
    "Workspace": {
      "type": "string"
    }
  },
  "resources": [
    {
      "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/69a45b05-71f5-45ca-8944-2e038747fb39')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/69a45b05-71f5-45ca-8944-2e038747fb39')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "kind": "Scheduled",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "name": "RDP Nesting",
        "triggerOperator": "gt",
        "triggerThreshold": 0,
        "tactics": [
          "LateralMovement"
        ],
        "severity": "Medium",
        "metadata": {
          "author": {
            "name": "Microsoft Security Research"
          },
          "source": {
            "kind": "Community"
          },
          "categories": {
            "domains": [
              "Security - Threat Protection"
            ]
          },
          "support": {
            "tier": "Community"
          }
        },
        "description": "'Query detects potential lateral movement within a network by identifying when an RDP connection (EventID 4624, LogonType 10) is made to an initial system, followed by a subsequent RDP connection from that system to another, using the same account within a 60-minute window.\n To reduce false positives, it excludes scenarios where the same account has made 5 or more connections to the same set of computers in the previous 7 days. This approach focuses on highlighting unusual RDP behaviour that suggests lateral movement, which is often associated with attacker tactics during a network breach.'\n",
        "queryFrequency": "1d",
        "entityMappings": [
          {
            "fieldMappings": [
              {
                "identifier": "FullName",
                "columnName": "Account"
              },
              {
                "identifier": "Name",
                "columnName": "AccountName"
              },
              {
                "identifier": "NTDomain",
                "columnName": "AccountNTDomain"
              }
            ],
            "entityType": "Account"
          },
          {
            "fieldMappings": [
              {
                "identifier": "FullName",
                "columnName": "FirstComputer"
              },
              {
                "identifier": "HostName",
                "columnName": "HostName1"
              },
              {
                "identifier": "NTDomain",
                "columnName": "HostNameDomain1"
              }
            ],
            "entityType": "Host"
          },
          {
            "fieldMappings": [
              {
                "identifier": "FullName",
                "columnName": "SecondComputer"
              },
              {
                "identifier": "HostName",
                "columnName": "HostName2"
              },
              {
                "identifier": "NTDomain",
                "columnName": "HostNameDomain2"
              }
            ],
            "entityType": "Host"
          },
          {
            "fieldMappings": [
              {
                "identifier": "Address",
                "columnName": "FirstIPAddress"
              }
            ],
            "entityType": "IP"
          }
        ],
        "queryPeriod": "8d",
        "query": "let endtime = 1d;\nlet starttime = 8d;\n// The threshold below excludes matching on RDP connection computer counts of 5 or more by a given account and IP in a given day. Change the threshold as needed.\nlet threshold = 5;\n// Function to resolve hostname to IP address using DNS logs or a lookup table (example syntax)\nlet rdpConnections = \n    (union isfuzzy=true\n        (\n        SecurityEvent\n        | where TimeGenerated >= ago(endtime)\n        | where EventID == 4624 and LogonType == 10\n        // Labeling the first RDP connection time, computer and ip\n        | extend\n            FirstHop = bin(TimeGenerated, 1m),\n            FirstComputer = toupper(Computer),\n            FirstIPAddress = IpAddress,\n            Account = tolower(Account)\n        ),\n        (\n        WindowsEvent\n        | where TimeGenerated >= ago(endtime)\n        | where EventID == 4624 and EventData has (\"10\")\n        | extend LogonType = tostring(EventData.LogonType)\n        | where LogonType == 10 // Labeling the first RDP connection time, computer and ip\n        | extend Account = strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\n        | extend IpAddress = tostring(EventData.IpAddress)\n        | extend\n            FirstHop = bin(TimeGenerated, 1m),\n            FirstComputer = toupper(Computer),\n            FirstIPAddress = IpAddress,\n            Account = tolower(Account)\n        ))\n    | join kind=inner (\n        (union isfuzzy=true\n            (\n            SecurityEvent\n            | where TimeGenerated >= ago(endtime)\n            | where EventID == 4624 and LogonType == 10\n            // Labeling the second RDP connection time, computer and ip\n            | extend\n                SecondHop = bin(TimeGenerated, 1m),\n                SecondComputer = toupper(Computer),\n                SecondIPAddress = IpAddress,\n                Account = tolower(Account)\n            ),\n            (\n            WindowsEvent\n            | where TimeGenerated >= ago(endtime)\n            | where EventID == 4624 and EventData has (\"10\")\n            | extend LogonType = toint(EventData.LogonType)\n            | where LogonType == 10 // Labeling the second RDP connection time, computer and ip\n            | extend Account = strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\n            | extend IpAddress = tostring(EventData.IpAddress)\n            | extend\n                SecondHop = bin(TimeGenerated, 1m),\n                SecondComputer = toupper(Computer),\n                SecondIPAddress = IpAddress,\n                Account = tolower(Account)\n            ))\n        )\n        on Account\n    // Ensure the first connection is before the second connection\n    // Identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match\n    // Ensure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers\n    | where FirstComputer != SecondComputer\n        and FirstIPAddress != SecondIPAddress\n        and SecondHop > FirstHop\n    // Ensure the second hop occurs within 30 minutes of the first hop\n    | where SecondHop <= FirstHop + 30m\n    | distinct\n        Account,\n        FirstHop,\n        FirstComputer,\n        FirstIPAddress,\n        SecondHop,\n        SecondComputer,\n        SecondIPAddress,\n        AccountType,\n        Activity,\n        LogonTypeName,\n        ProcessName;        \n// Resolve hostnames to IP addresses device network Ip's\nlet listOfFirstComputer = rdpConnections | distinct FirstComputer;\nlet listOfSecondComputer = rdpConnections | distinct SecondComputer;\nlet resolvedIPs =  \n    DeviceNetworkInfo\n    | where TimeGenerated >= ago(endtime)\n    | where isnotempty(ConnectedNetworks) and NetworkAdapterStatus == \"Up\"\n    | extend ClientIP = tostring(parse_json(IPAddresses[0]).IPAddress)\n    | where isnotempty(ClientIP)\n    | where DeviceName in~  (listOfFirstComputer) or DeviceName in~ (listOfSecondComputer)\n    | summarize arg_max(TimeGenerated, ClientIP) by Computer= DeviceName\n    | project Computer=toupper(Computer), ResolvedIP = ClientIP;\n// Join resolved IPs with the RDP connections\nrdpConnections\n| join kind=inner (resolvedIPs) on $left.FirstComputer == $right.Computer\n| join kind=inner (resolvedIPs) on $left.SecondComputer == $right.Computer\n| where ResolvedIP != ResolvedIP1\n| distinct\n    Account,\n    FirstHop,\n    FirstComputer,\n    FirstIPAddress,\n    SecondHop,\n    SecondComputer,\n    SecondIPAddress,\n    AccountType,\n    Activity,\n    LogonTypeName,\n    ProcessName\n// Use left anti to exclude anything from the previous 7 days where the Account and IP has connected to 5 or more computers.\n| join kind=leftanti (\n    (union isfuzzy=true\n        (\n        SecurityEvent\n        | where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n        | where EventID == 4624 and LogonType == 10\n        | summarize make_set(Computer), ComputerCount = dcount(Computer) by bin(TimeGenerated, 1d), Account = tolower(Account), IpAddress\n        // Connection count to computer by same account and IP to exclude counts of 5 or more on a given day\n        | where ComputerCount >= threshold\n        | mvexpand set_Computer\n        | extend Computer = toupper(set_Computer)\n        ),\n        (\n        WindowsEvent\n        | where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n        | where EventID == 4624 and EventData has (\"10\")\n        | extend LogonType = tostring(EventData.LogonType)\n        | where LogonType == 10\n        | extend Account = strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\n        | extend IpAddress = tostring(EventData.IpAddress)\n        | summarize make_set(Computer), ComputerCount = dcount(Computer) by bin(TimeGenerated, 1d), Account = tolower(Account), IpAddress\n        // Connection count to computer by same account and IP to exclude counts of 5 or more on a given day\n        | where ComputerCount >= threshold\n        | mvexpand set_Computer\n        | extend Computer = toupper(set_Computer)\n        ))\n    )\n    on\n    Account,\n    $left.SecondComputer == $right.Computer,\n    $left.SecondIPAddress == $right.IpAddress\n| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop)\n    by\n    Account,\n    FirstComputer,\n    FirstIPAddress,\n    SecondHop,\n    SecondComputer,\n    SecondIPAddress,\n    AccountType,\n    Activity,\n    LogonTypeName,\n    ProcessName\n| extend\n    AccountName = tostring(split(Account, @\"\\\")[1]),\n    AccountNTDomain = tostring(split(Account, @\"\\\")[0])\n| extend\n    HostName1 = tostring(split(FirstComputer, \".\")[0]),\n    DomainIndex = toint(indexof(FirstComputer, '.'))\n| extend HostNameDomain1 = iff(DomainIndex != -1, substring(FirstComputer, DomainIndex + 1), FirstComputer)\n| extend\n    HostName2 = tostring(split(SecondComputer, \".\")[0]),\n    DomainIndex = toint(indexof(SecondComputer, '.'))\n| extend HostNameDomain2 = iff(DomainIndex != -1, substring(SecondComputer, DomainIndex + 1), SecondComputer)\n| project-away DomainIndex\n"
      }
    }
  ]
}
